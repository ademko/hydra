
CMAKE_POLICY(PUSH)

CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0)

PROJECT(hydra)

#we usually want shared so that qt is dynamic
SET(BUILD_SHARED_LIBS "YES" CACHE BOOL "Build shared libraries rather than static ones")

GET_FILENAME_COMPONENT(THIS_PATH ${CMAKE_CURRENT_LIST_FILE} PATH)

IF(WIN32 AND BUILD_SHARED_LIBS)
# under windows, libhydra is always static
# its just simpler that way (no need to export symbols, etc)
SET(ALWAYS_WIN32_STATIC STATIC)
ENDIF(WIN32 AND BUILD_SHARED_LIBS)

#
# QT
#

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

FIND_PACKAGE(Qt5 COMPONENTS Widgets Xml REQUIRED)

#
# sqlite3 (required, but you can provide a sqlite3.c if the system doesn't have one
#

FIND_LIBRARY(SQLITE3_LIBRARY sqlite3)

SET(SQLITE3_SRC_DIR "" CACHE PATH "The directory of sqlite3.c and sqlite3.h, an alternative to SQLITE3_LIBRARY")

#
# exif (optional)
#

SET(BUILD_HYDRA_LIBEXIF_SUPPORT OFF CACHE BOOL "Enable libexif usage in hydra")
IF(BUILD_HYDRA_LIBEXIF_SUPPORT)
FIND_LIBRARY(EXIF_LIBRARY exif)
ENDIF(BUILD_HYDRA_LIBEXIF_SUPPORT)


#
# libhydra.so
#

FILE(GLOB HYDRA_SOURCES ${THIS_PATH}/hydra/*.h ${THIS_PATH}/hydra/*.cpp) 

ADD_LIBRARY(hydra ${ALWAYS_WIN32_STATIC} ${HEADERS_MOC} ${HYDRA_SOURCES})

TARGET_INCLUDE_DIRECTORIES(hydra PUBLIC ${THIS_PATH})

IF(BUILD_SHARED_LIBS)
TARGET_COMPILE_DEFINITIONS(hydra PUBLIC BUILD_SHARED_LIBS)
ENDIF(BUILD_SHARED_LIBS)

IF(UNIX)
TARGET_COMPILE_OPTIONS(hydra PUBLIC -std=c++14 -Wall -Wno-sign-compare)
ENDIF(UNIX)
IF(WIN32)
TARGET_COMPILE_OPTIONS(hydra PUBLIC /w44018)    # sign compare warning
TARGET_COMPILE_OPTIONS(hydra PUBLIC /w44018)    # sign compare warning
TARGET_COMPILE_DEFINITIONS(hydra PUBLIC _CRT_SECURE_NO_WARNINGS)    # disable complaing about ::getenv
ENDIF(WIN32)

TARGET_LINK_LIBRARIES(hydra Qt5::Widgets Qt5::Xml)

IF(NOT SQLITE3_LIBRARY STREQUAL "SQLITE3_LIBRARY-NOTFOUND")
TARGET_LINK_LIBRARIES(hydra ${SQLITE3_LIBRARY})
ENDIF(NOT SQLITE3_LIBRARY STREQUAL "SQLITE3_LIBRARY-NOTFOUND")

IF(SQLITE3_SRC_DIR)
TARGET_INCLUDE_DIRECTORIES(hydra PRIVATE ${SQLITE3_SRC_DIR})
TARGET_SOURCES(hydra  ${SQLITE3_SRC_DIR}/sqlite3.c)
ENDIF(SQLITE3_SRC_DIR)

IF(BUILD_HYDRA_LIBEXIF_SUPPORT)
TARGET_LINK_LIBRARIES(hydra ${EXIF_LIBRARY})
TARGET_COMPILE_DEFINITIONS(hydra PUBLIC BUILD_HYDRA_EXIF_SUPPORT)
ENDIF(BUILD_HYDRA_LIBEXIF_SUPPORT)

#
# hydratag
#

ADD_EXECUTABLE(hydratag ${THIS_PATH}/hydratag.cpp)
TARGET_LINK_LIBRARIES(hydratag hydra)

#
# hydraweb
#

ADD_EXECUTABLE(hydraweb ${THIS_PATH}/hydraweb.cpp)
TARGET_LINK_LIBRARIES(hydraweb hydra)

#
# hydradesktop
#

FILE(GLOB HYDRADESKTOP_SOURCES ${THIS_PATH}/desktop/*.h ${THIS_PATH}/desktop/*.cpp ${THIS_PATH}/desktop/*.ui) 
ADD_EXECUTABLE(hydradesktop WIN32 ${THIS_PATH}/hydradesktop.cpp ${HYDRADESKTOP_SOURCES})
TARGET_LINK_LIBRARIES(hydradesktop hydra)

CMAKE_POLICY(POP)

